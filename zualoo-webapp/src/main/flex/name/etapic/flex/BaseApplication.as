package name.etapic.flex{	import com.mimswright.sync.Synchronizer;		import flash.events.Event;	import flash.net.URLRequest;	import flash.net.navigateToURL;		import lt.uza.utils.Global;		import mx.core.Application;		import org.hasseg.externalMouseWheel.*;	public class BaseApplication extends mx.core.Application	{		public var mouseWheelSupport:ExternalMouseWheelSupport;		protected var app:Global;				function BaseApplication()		{							// Only access stage-related properties when added to stage.			addEventListener(Event.ADDED_TO_STAGE, init);		}		// Override the init method to carry out initialization logic.		// You can do whatever you like here (with stage clips, etc.		// without worrying about triggering errors when this app		// is loaded into another one.)		protected function init(event:Event):void		{			trace("BaseApplication.init()");						// Enable mouse-wheel support on OS X			// Note: You need to register components that require mouse wheel 			// support manually. It's best to register them each time a screen/form			// is made visible. You can set this to true but I've found issues with it			// (mouse wheel ceasing to function after state changes).			ExternalMouseWheelSupport.registerAutomatically = false;			mouseWheelSupport = ExternalMouseWheelSupport.instance;						// Listen for SWFAddress updates.			SWFAddress.addEventListener(SWFAddressEvent.INIT, handleSWFAddressInit);						// Set up the KitchenSyncLib synchronizer.			Synchronizer.initialize(this);												// Using Uza's Global class.			app = Global.getInstance();									// Reference to us			app.application = this;						// Save the root in the global object			// (where it _should_ be, guys!) and a few other convenience items.			// (Don't abuse this.)			app.root = root;			var url:String = Global.getInstance().root.loaderInfo.url;			// Is the app running locally?			app.isLocal = (url.substr(0, 7) == "file://");						// Save the base url (e.g. http://localhost:8080 or http://myapp.gaespot.com)			// Notice: There is _no_ trailing space.			app.baseURL = url.substr(0, url.indexOf('/', 7));					}		private function handleSWFAddressInit(event:SWFAddressEvent):void		{			urlInit();			SWFAddress.addEventListener(SWFAddressEvent.CHANGE, handleSWFAddress);		}				// Override this to execute logic when the app's url becomes available		// (e.g. before calling GAE login.)		protected function urlInit():void		{			trace("Warning: urlInit() not handled in Application class.");		}				// Important view states are mapped to URLs via SWFAddress. 		protected function handleSWFAddress(event:SWFAddressEvent):void 		{			urlChange();		}		// Override this to handle deep links.		protected function urlChange():void		{			trace("Warning: urlChange() not handled in Application class.");		}				protected function getBaseUrl():String		{			return app.baseURL;		}				// Get requested URL in the same browser window.		protected function getURL(url:String):void		{			var request:URLRequest = new URLRequest(url);				try 			{				navigateToURL(request, '_self');			} 			catch (e:Error) 			{				trace("Error occurred while trying to navigate to " + url);			}		}			}}